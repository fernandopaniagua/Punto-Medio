/**
 * Implementación del algoritmo de punto medio para circunferencias<br>
 * <br>
 * Ver explicación del algoritmo del punto medio en
 * <a href="https://es.wikipedia.org/wiki/Algoritmo_del_punto_medio_para_circunferencias" target="_blank">Wikipedia</a><br>
 * <br>
 * Programado por
 * <a href="http://www.fernandopaniagua.com" target="_blank">Fernando
 * Paniagua</a><br>
 * <br>
 *
 * @version 1.0.
 * @since 2016
 * @author Fernando Paniagua (fernando.paniagua@gmail.com)
 */
package com.fernandopaniagua.puntomedio;

import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 * JPanel principal
 *
 * @author Fernando Paniagua
 */
public class JPPuntoMedio extends javax.swing.JPanel {

    /**
     * Constructor
     */
    public JPPuntoMedio() {
        initComponents();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        int x = 0;//Valor de x
        int r = 200;//Radio
        int t = 250;//Traslación desde el 0.0
        int y = r;
        //int p = (5/4) - r;
        int p = 1 - r;
        while (x < y) {
            //g2.drawLine(x,y,x,y);//Sin traslación - Dibujaría la circunferncia desde el punto 0.0 
            //Dibujamos los octantes, utilizando una traslación de t píxeles para x e y
            g2.drawLine(x + t, y + t, x + t, y + t);
            g2.drawLine(x * -1 + t, y + t, x * -1 + t, y + t);
            g2.drawLine(x + t, y * -1 + t, x + t, y * -1 + t);
            g2.drawLine(x * -1 + t, y * -1 + t, x * -1 + t, y * -1 + t);
            g2.drawLine(y + t, x + t, y + t, x + t);
            g2.drawLine(y * -1 + t, x + t, y * -1 + t, x + t);
            g2.drawLine(y + t, x * -1 + t, y + t, x * -1 + t);
            g2.drawLine(y * -1 + t, x * -1 + t, y * -1 + t, x * -1 + t);
            if (p < 0) {
                x++;
                p = p + 2 * x + 1;
            } else {
                x++;
                y--;
                p = p + 2 * x + 1 - 2 * y;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
